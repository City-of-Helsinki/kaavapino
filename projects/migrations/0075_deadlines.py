# Generated by Django 2.2.13 on 2020-11-12 10:20

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import projects.models.deadline
import re


class Migration(migrations.Migration):

    dependencies = [
        ('projects', '0074_pino_number_blank_null_true'),
    ]

    operations = [
        migrations.CreateModel(
            name='AutomaticDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('weekdays', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(0, 'monday'), (1, 'tuesday'), (2, 'wednesday'), (3, 'thursday'), (4, 'friday'), (5, 'saturday'), (6, 'sunday')]), size=None, verbose_name='weekdays')),
                ('week', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(53)], verbose_name='week number')),
                ('before_holiday', models.CharField(blank=True, choices=[('New year', 'New year'), ('Epiphany', 'Epiphany'), ('Good Friday', 'Good Friday'), ('Easter Sunday', 'Easter Sunday'), ('Easter Monday', 'Easter Monday'), ('Labour Day', 'Labour Day'), ('Ascension Thursday', 'Ascension Thursday'), ('Pentecost', 'Pentecost'), ("Midsummer's Eve", "Midsummer's Eve"), ("Midsummer's Day", "Midsummer's Day"), ('All Saints', 'All Saints'), ('Independence Day', 'Independence Day'), ('Christmas Eve', 'Christmas Eve'), ('Christmas Day', 'Christmas Day'), ("St. Stephen's Day", "St. Stephen's Day")], max_length=255, null=True, verbose_name='last day before holiday')),
                ('after_holiday', models.CharField(blank=True, choices=[('New year', 'New year'), ('Epiphany', 'Epiphany'), ('Good Friday', 'Good Friday'), ('Easter Sunday', 'Easter Sunday'), ('Easter Monday', 'Easter Monday'), ('Labour Day', 'Labour Day'), ('Ascension Thursday', 'Ascension Thursday'), ('Pentecost', 'Pentecost'), ("Midsummer's Eve", "Midsummer's Eve"), ("Midsummer's Day", "Midsummer's Day"), ('All Saints', 'All Saints'), ('Independence Day', 'Independence Day'), ('Christmas Eve', 'Christmas Eve'), ('Christmas Day', 'Christmas Day'), ("St. Stephen's Day", "St. Stephen's Day")], max_length=255, null=True, verbose_name='first day after holiday')),
                ('start_date', models.CharField(blank=True, max_length=6, null=True, validators=[projects.models.deadline.AutomaticDate.validate_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, max_length=6, null=True, validators=[projects.models.deadline.AutomaticDate.validate_date], verbose_name='end date')),
            ],
        ),
        migrations.CreateModel(
            name='DateCalculation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('constant', models.IntegerField(blank=True, null=True, verbose_name='days to add')),
                ('base_date_attribute', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='projects.Attribute', verbose_name='relies on date from attribute')),
            ],
        ),
        migrations.CreateModel(
            name='DateType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(db_index=True, max_length=255, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[\\w]+\\Z'), "Enter a valid 'identifier' consisting of Unicode letters, numbers or underscores.", 'invalid')])),
                ('name', models.CharField(max_length=255)),
                ('business_days_only', models.BooleanField(default=True, verbose_name='do not include holidays and weekends')),
                ('dates', django.contrib.postgres.fields.ArrayField(base_field=models.DateField(), blank=True, null=True, size=None, verbose_name='dates')),
                ('exclude_selected', models.BooleanField(default=False, verbose_name='exclude selected dates')),
                ('automatic_dates', models.ManyToManyField(blank=True, to='projects.AutomaticDate', verbose_name='automatic dates')),
                ('base_datetype', models.ManyToManyField(blank=True, to='projects.DateType', verbose_name='base type')),
            ],
        ),
        migrations.CreateModel(
            name='Deadline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abbreviation', models.CharField(max_length=255, verbose_name='abbreviation')),
                ('identifier', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(re.compile('^[\\w]+\\Z'), "Enter a valid 'identifier' consisting of Unicode letters, numbers or underscores.", 'invalid')], verbose_name='identifier')),
                ('edit_privilege', models.CharField(blank=True, choices=[(None, 'Ei roolia'), ('browse', 'Selaaja'), ('edit', 'Asiantuntija'), ('create', 'Vastuuhenkilö'), ('admin', 'Pääkäyttäjä')], default=None, max_length=6, null=True)),
                ('deadline_type', models.CharField(choices=[('start_point', 'start point'), ('end_point', 'end point'), ('milestone', 'milestone')], max_length=64, verbose_name='deadline type')),
                ('min_distance', models.IntegerField(default=0, verbose_name='minimum distance from closest applicable reference deadline')),
                ('error_past_due', models.TextField(blank=True, null=True, verbose_name='error message for past due date')),
                ('error_min_distance_previous', models.TextField(blank=True, null=True, verbose_name='error message for minimum distance to previous date not met')),
                ('warning_min_distance_next', models.TextField(blank=True, null=True, verbose_name='warning message for minimum distance to next date not met')),
                ('index', models.PositiveIntegerField(default=0, verbose_name='index')),
                ('condition_attributes', models.ManyToManyField(blank=True, to='projects.Attribute', verbose_name='show if any attribute is set')),
                ('date_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='projects.DateType', verbose_name='date type')),
                ('distance_reference_deadlines', models.ManyToManyField(blank=True, related_name='distance_reference_to', to='projects.Deadline', verbose_name='reference deadline(s) for minimum distance')),
            ],
            options={
                'ordering': ('index',),
            },
        ),
        migrations.RemoveField(
            model_name='project',
            name='deadlines',
        ),
        migrations.CreateModel(
            name='ProjectDeadline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='deadline date')),
                ('confirmed', models.BooleanField(default=False, verbose_name='confirmed')),
                ('deadline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_deadlines', to='projects.Deadline', verbose_name='deadline')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_deadlines', to='projects.Project', verbose_name='project')),
            ],
        ),
        migrations.CreateModel(
            name='DeadlineDateCalculation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.PositiveIntegerField(default=0, verbose_name='index')),
                ('conditions', models.ManyToManyField(blank=True, to='projects.Attribute', verbose_name='use rule if any attribute is set')),
                ('datecalculation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.DateCalculation', verbose_name='date calculation')),
                ('deadline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.Deadline', verbose_name='deadline')),
            ],
            options={
                'ordering': ('index',),
            },
        ),
        migrations.AddField(
            model_name='deadline',
            name='initial_calculations',
            field=models.ManyToManyField(blank=True, related_name='generates_deadlines', to='projects.DeadlineDateCalculation', verbose_name='initial calculations'),
        ),
        migrations.AddField(
            model_name='deadline',
            name='phase',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule', to='projects.ProjectPhase', verbose_name='phase'),
        ),
        migrations.AddField(
            model_name='deadline',
            name='subtype',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule', to='projects.ProjectSubtype', verbose_name='subtype'),
        ),
        migrations.AddField(
            model_name='deadline',
            name='update_calculations',
            field=models.ManyToManyField(blank=True, related_name='updates_deadlines', to='projects.DeadlineDateCalculation', verbose_name='update calculations'),
        ),
        migrations.CreateModel(
            name='DateCalculationAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subtract', models.BooleanField(default=False, verbose_name='subtract')),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='projects.Attribute', verbose_name='relies on date from attribute')),
                ('calculation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attributes', to='projects.DateCalculation', verbose_name='calculation')),
            ],
        ),
        migrations.AddField(
            model_name='datecalculation',
            name='base_date_deadline',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='projects.Deadline', verbose_name='relies on date from deadline'),
        ),
        migrations.AddField(
            model_name='project',
            name='deadlines',
            field=models.ManyToManyField(related_name='projects', to='projects.ProjectDeadline', verbose_name='deadlines'),
        ),
        migrations.AlterUniqueTogether(
            name='deadline',
            unique_together={('abbreviation', 'subtype'), ('identifier', 'subtype')},
        ),
    ]
